//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class CoreContext {

    public CoreEntity gameStateEntity { get { return GetGroup(CoreMatcher.GameState).GetSingleEntity(); } }
    public Main.GameStateComponent gameState { get { return gameStateEntity.gameState; } }
    public bool hasGameState { get { return gameStateEntity != null; } }

    public CoreEntity SetGameState(Main.RegisteredGameState newValue) {
        if (hasGameState) {
            throw new Entitas.EntitasException("Could not set GameState!\n" + this + " already has an entity with Main.GameStateComponent!",
                "You should check if the context already has a gameStateEntity before setting it or use context.ReplaceGameState().");
        }
        var entity = CreateEntity();
        entity.AddGameState(newValue);
        return entity;
    }

    public void ReplaceGameState(Main.RegisteredGameState newValue) {
        var entity = gameStateEntity;
        if (entity == null) {
            entity = SetGameState(newValue);
        } else {
            entity.ReplaceGameState(newValue);
        }
    }

    public void RemoveGameState() {
        gameStateEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class CoreEntity {

    public Main.GameStateComponent gameState { get { return (Main.GameStateComponent)GetComponent(CoreComponentsLookup.GameState); } }
    public bool hasGameState { get { return HasComponent(CoreComponentsLookup.GameState); } }

    public void AddGameState(Main.RegisteredGameState newValue) {
        var index = CoreComponentsLookup.GameState;
        var component = (Main.GameStateComponent)CreateComponent(index, typeof(Main.GameStateComponent));
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceGameState(Main.RegisteredGameState newValue) {
        var index = CoreComponentsLookup.GameState;
        var component = (Main.GameStateComponent)CreateComponent(index, typeof(Main.GameStateComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveGameState() {
        RemoveComponent(CoreComponentsLookup.GameState);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class CoreMatcher {

    static Entitas.IMatcher<CoreEntity> _matcherGameState;

    public static Entitas.IMatcher<CoreEntity> GameState {
        get {
            if (_matcherGameState == null) {
                var matcher = (Entitas.Matcher<CoreEntity>)Entitas.Matcher<CoreEntity>.AllOf(CoreComponentsLookup.GameState);
                matcher.componentNames = CoreComponentsLookup.componentNames;
                _matcherGameState = matcher;
            }

            return _matcherGameState;
        }
    }
}
