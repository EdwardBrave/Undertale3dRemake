//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class InputContext {

    public InputEntity battleInputEntity { get { return GetGroup(InputMatcher.BattleInput).GetSingleEntity(); } }
    public Input.Components.BattleInputComponent battleInput { get { return battleInputEntity.battleInput; } }
    public bool hasBattleInput { get { return battleInputEntity != null; } }

    public InputEntity SetBattleInput(GameControls.BattleActions newActions) {
        if (hasBattleInput) {
            throw new Entitas.EntitasException("Could not set BattleInput!\n" + this + " already has an entity with Input.Components.BattleInputComponent!",
                "You should check if the context already has a battleInputEntity before setting it or use context.ReplaceBattleInput().");
        }
        var entity = CreateEntity();
        entity.AddBattleInput(newActions);
        return entity;
    }

    public void ReplaceBattleInput(GameControls.BattleActions newActions) {
        var entity = battleInputEntity;
        if (entity == null) {
            entity = SetBattleInput(newActions);
        } else {
            entity.ReplaceBattleInput(newActions);
        }
    }

    public void RemoveBattleInput() {
        battleInputEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class InputEntity {

    public Input.Components.BattleInputComponent battleInput { get { return (Input.Components.BattleInputComponent)GetComponent(InputComponentsLookup.BattleInput); } }
    public bool hasBattleInput { get { return HasComponent(InputComponentsLookup.BattleInput); } }

    public void AddBattleInput(GameControls.BattleActions newActions) {
        var index = InputComponentsLookup.BattleInput;
        var component = (Input.Components.BattleInputComponent)CreateComponent(index, typeof(Input.Components.BattleInputComponent));
        component.actions = newActions;
        AddComponent(index, component);
    }

    public void ReplaceBattleInput(GameControls.BattleActions newActions) {
        var index = InputComponentsLookup.BattleInput;
        var component = (Input.Components.BattleInputComponent)CreateComponent(index, typeof(Input.Components.BattleInputComponent));
        component.actions = newActions;
        ReplaceComponent(index, component);
    }

    public void RemoveBattleInput() {
        RemoveComponent(InputComponentsLookup.BattleInput);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class InputMatcher {

    static Entitas.IMatcher<InputEntity> _matcherBattleInput;

    public static Entitas.IMatcher<InputEntity> BattleInput {
        get {
            if (_matcherBattleInput == null) {
                var matcher = (Entitas.Matcher<InputEntity>)Entitas.Matcher<InputEntity>.AllOf(InputComponentsLookup.BattleInput);
                matcher.componentNames = InputComponentsLookup.componentNames;
                _matcherBattleInput = matcher;
            }

            return _matcherBattleInput;
        }
    }
}
