//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class InputContext {

    public InputEntity motionInputEntity { get { return GetGroup(InputMatcher.MotionInput).GetSingleEntity(); } }
    public Input.Components.MotionInputComponent motionInput { get { return motionInputEntity.motionInput; } }
    public bool hasMotionInput { get { return motionInputEntity != null; } }

    public InputEntity SetMotionInput(GameControls.MotionActions newActions) {
        if (hasMotionInput) {
            throw new Entitas.EntitasException("Could not set MotionInput!\n" + this + " already has an entity with Input.Components.MotionInputComponent!",
                "You should check if the context already has a motionInputEntity before setting it or use context.ReplaceMotionInput().");
        }
        var entity = CreateEntity();
        entity.AddMotionInput(newActions);
        return entity;
    }

    public void ReplaceMotionInput(GameControls.MotionActions newActions) {
        var entity = motionInputEntity;
        if (entity == null) {
            entity = SetMotionInput(newActions);
        } else {
            entity.ReplaceMotionInput(newActions);
        }
    }

    public void RemoveMotionInput() {
        motionInputEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class InputEntity {

    public Input.Components.MotionInputComponent motionInput { get { return (Input.Components.MotionInputComponent)GetComponent(InputComponentsLookup.MotionInput); } }
    public bool hasMotionInput { get { return HasComponent(InputComponentsLookup.MotionInput); } }

    public void AddMotionInput(GameControls.MotionActions newActions) {
        var index = InputComponentsLookup.MotionInput;
        var component = (Input.Components.MotionInputComponent)CreateComponent(index, typeof(Input.Components.MotionInputComponent));
        component.actions = newActions;
        AddComponent(index, component);
    }

    public void ReplaceMotionInput(GameControls.MotionActions newActions) {
        var index = InputComponentsLookup.MotionInput;
        var component = (Input.Components.MotionInputComponent)CreateComponent(index, typeof(Input.Components.MotionInputComponent));
        component.actions = newActions;
        ReplaceComponent(index, component);
    }

    public void RemoveMotionInput() {
        RemoveComponent(InputComponentsLookup.MotionInput);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class InputMatcher {

    static Entitas.IMatcher<InputEntity> _matcherMotionInput;

    public static Entitas.IMatcher<InputEntity> MotionInput {
        get {
            if (_matcherMotionInput == null) {
                var matcher = (Entitas.Matcher<InputEntity>)Entitas.Matcher<InputEntity>.AllOf(InputComponentsLookup.MotionInput);
                matcher.componentNames = InputComponentsLookup.componentNames;
                _matcherMotionInput = matcher;
            }

            return _matcherMotionInput;
        }
    }
}
